//@version=6
strategy("Universal NASDAQ Long Strategy - Balanced", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// === INPUTS ===
chartTF = input.string("15", title="Chart Timeframe (min)") // For alert labeling
mode = input.string("Balanced", title="Strategy Mode", options=["Balanced"])
rsiPeriod = input.int(14, title="RSI Period")
emaFastLen = input.int(9, title="EMA Fast Length")
emaSlowLen = input.int(21, title="EMA Slow Length")
adxPeriod = input.int(14, title="ADX Period")
adxSmoothing = input.int(14, title="ADX Smoothing")
atrPeriod = input.int(14, title="ATR Period")
slMult = input.float(1.2, title="Stop Loss ATR Multiplier")
tpMult = input.float(2.0, title="Take Profit ATR Multiplier")

// === INDICATORS ===
rsi = ta.rsi(close, rsiPeriod)
emaFast = ta.ema(close, emaFastLen)
emaSlow = ta.ema(close, emaSlowLen)
[_, _, adx] = ta.dmi(adxPeriod, adxSmoothing)
atr = ta.atr(atrPeriod)
macdLine = ta.ema(close, 12) - ta.ema(close, 26)
macdSignal = ta.ema(macdLine, 9)
macdHist = macdLine - macdSignal

// === ENTRY CONDITIONS ===
longCondition = rsi > 50 and macdHist > 0 and adx > 20 and close > emaFast

if (longCondition)
    strategy.entry("Long", strategy.long)

// === EXIT CONDITIONS ===
sl = close - atr * slMult
tp = close + atr * tpMult
strategy.exit("TP/SL Exit", from_entry="Long", stop=sl, limit=tp)

exitCondition = macdHist < 0 or rsi < 48
if (exitCondition)
    strategy.close("Long")

// === CONTEXT ALERT (every 15 min real time, not bars) ===
contextAlertMessage = "{" +
  "\"action\":\"CONTEXT\"," +
  "\"symbol\":\"" + syminfo.ticker + "\"," +
  "\"timeframe\":\"" + chartTF + "\"," +
  "\"direction\":\"flat\"," +
  "\"mode\":\"" + mode + "\"," +
  "\"reason\":\"Periodic Snapshot\"," +
  "\"price\":" + str.tostring(close) + "," +
  "\"rsi\":" + str.tostring(rsi) + "," +
  "\"macd_line\":" + str.tostring(macdLine) + "," +
  "\"macd_signal\":" + str.tostring(macdSignal) + "," +
  "\"macd_hist\":" + str.tostring(macdHist) + "," +
  "\"ema_fast\":" + str.tostring(emaFast) + "," +
  "\"ema_slow\":" + str.tostring(emaSlow) + "," +
  "\"ema_master\":0," +
  "\"adx\":" + str.tostring(adx) + "," +
  "\"atr\":" + str.tostring(atr) + "," +
  "\"score\":0," +
  "\"strength\":\"Unknown\"," +
  "\"open_position_size\":0," +
  "\"entry_price\":0," +
  "\"unrealized_pl_pct\":0," +
  "\"candle_open\":" + str.tostring(open) + "," +
  "\"candle_high\":" + str.tostring(high) + "," +
  "\"candle_low\":" + str.tostring(low) + "," +
  "\"candle_close\":" + str.tostring(close) + "," +
  "\"volume\":" + str.tostring(volume) + "," +
  "\"vol_sma\":0," +
  "\"timestamp\":" + str.tostring(timenow * 1000) + "}"

snapshotIntervalMin = input.int(15, title="Snapshot Interval (min)")
snapIntervalMs = snapshotIntervalMin * 60 * 1000
var int lastSnapshot = na
isSnapshotDue = na(lastSnapshot) or (timenow * 1000 - lastSnapshot >= snapIntervalMs)

if isSnapshotDue
    alert(contextAlertMessage, alert.freq_once_per_bar)
    lastSnapshot := timenow * 1000

// === ENTRY ALERT ===
alertMessage = "{" +
  "\"action\":\"ENTRY_TRIGGER\"," +
  "\"symbol\":\"" + syminfo.ticker + "\"," +
  "\"timeframe\":\"" + chartTF + "\"," +
  "\"direction\":\"up\"," +
  "\"mode\":\"" + mode + "\"," +
  "\"reason\":\"All conditions met\"," +
  "\"price\":" + str.tostring(close) + "," +
  "\"rsi\":" + str.tostring(rsi) + "," +
  "\"macd_line\":" + str.tostring(macdLine) + "," +
  "\"macd_signal\":" + str.tostring(macdSignal) + "," +
  "\"macd_hist\":" + str.tostring(macdHist) + "," +
  "\"ema_fast\":" + str.tostring(emaFast) + "," +
  "\"ema_slow\":" + str.tostring(emaSlow) + "," +
  "\"ema_master\":0," +
  "\"adx\":" + str.tostring(adx) + "," +
  "\"atr\":" + str.tostring(atr) + "," +
  "\"stop_loss\":" + str.tostring(sl) + "," +
  "\"take_profit\":" + str.tostring(tp) + "," +
  "\"score\":0," +
  "\"strength\":\"Unknown\"," +
  "\"open_position_size\":0," +
  "\"entry_price\":0," +
  "\"unrealized_pl_pct\":0," +
  "\"candle_open\":" + str.tostring(open) + "," +
  "\"candle_high\":" + str.tostring(high) + "," +
  "\"candle_low\":" + str.tostring(low) + "," +
  "\"candle_close\":" + str.tostring(close) + "," +
  "\"volume\":" + str.tostring(volume) + "," +
  "\"vol_sma\":0," +
  "\"timestamp\":" + str.tostring(timenow * 1000) + "}"

alertcondition(longCondition, title="Long Entry Alert")
if (longCondition)
    alert(alertMessage, alert.freq_once_per_bar_close)

// === EXIT ALERT ===
exitAlertMessage = "{" +
  "\"action\":\"EXIT_SIGNAL\"," +
  "\"symbol\":\"" + syminfo.ticker + "\"," +
  "\"timeframe\":\"" + chartTF + "\"," +
  "\"reason\":\"Indicator exit triggered (RSI or MACD)\"," +
  "\"price\":" + str.tostring(close) + "," +
  "\"rsi\":" + str.tostring(rsi) + "," +
  "\"macd_line\":" + str.tostring(macdLine) + "," +
  "\"macd_signal\":" + str.tostring(macdSignal) + "," +
  "\"macd_hist\":" + str.tostring(macdHist) + "," +
  "\"adx\":" + str.tostring(adx) + "," +
  "\"atr\":" + str.tostring(atr) + "," +
  "\"timestamp\":" + str.tostring(timenow * 1000) + "}"

alertcondition(exitCondition, title="Exit Alert - Indicator")
if (exitCondition)
    alert(exitAlertMessage, alert.freq_once_per_bar_close)
